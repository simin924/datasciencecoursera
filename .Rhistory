ms=round(2*p1*(1-p1)*
(qnorm(1-alpha/2)+qnorm(1-beta))^2/(delta)^2)+1
#ms is Minimum sample size
ctrl=rbinom(ms,1,p1)
trm=rbinom(ms,1,p1+delta)
#trm=rbinom(ms,1,p1+delta)
p1_hat=mean(ctrl)
p2_hat=mean(trm)
lower=p2_hat-p1_hat-1.96*sqrt(p1_hat*(1-p1_hat)/ms+p2_hat*(1-p2_hat)/ms)
upper=p2_hat-p1_hat+1.96*sqrt(p1_hat*(1-p1_hat)/ms+p2_hat*(1-p2_hat)/ms)
(p2_hat-p1_hat)/p1_hat
#绝对置信区间
lower_relative=exp(log(p2_hat)-log(p1_hat)-1.96*sqrt((1-p1_hat)/p1_hat/ms+(1-p2_hat)/p2/ms))-1
upper_relative=exp(log(p2_hat)-log(p1_hat)+1.96*sqrt((1-p1_hat)/p1_hat/ms+(1-p2_hat)/p2/ms))-1
#log(p2/p1)的置信区间
result=rbind(data.frame(p1_hat, p2_hat, lower, upper, metric1=p2_hat-p1_hat,sig_absolute=ifelse(lower*upper>0,1,0),
lower_relative, upper_relative, metric2=(p2_hat-p1_hat)/p1_hat,sig_relative=ifelse(lower_relative*upper_relative>0,1,0)),result)
}
result
View(result)
sum(result$sig_absolute==reault$sig_relative)
sum(result$sig_absolute==result$sig_relative)
sum(result$sig_absolute!=result$sig_relative)
n=10000
mu_trm=p1_hat
sd_trm=p1_hat*(1-p1_hat)/ms
mu_trm=p2_hat
sd_trm=p2_hat*(1-p2_hat)/ms
n=10000
mu_trm=p1_hat
sd_trm=p1_hat*(1-p1_hat)/ms
mu_ctrl=p2_hat
sd_ctrl=p2_hat*(1-p2_hat)/ms
trm=rnorm(n,mu_trm,sd_trm)
ctrl=rnorm(n,mu_ctrl,sd_ctrl)
quantile(diff,c(0.025,0.975))
diff=trm-ctrl
lift=(trm-ctrl)/ctrl
quantile(diff,c(0.025,0.975))
quantile(lieft,c(0.025,0.975))
quantile(lift,c(0.025,0.975))
n=10000
mu_trm=p1_hat
sd_trm=p1_hat*(1-p1_hat)/ms
mu_ctrl=p2_hat
sd_ctrl=p2_hat*(1-p2_hat)/ms
trm=rnorm(n,mu_trm,sd_trm)
ctrl=rnorm(n,mu_ctrl,sd_ctrl)
diff=trm-ctrl
lift=(trm-ctrl)/ctrl
quantile(diff,c(0.025,0.975))
quantile(lift,c(0.025,0.975))
quantile(diff,c(0.025,0.975))
quantile(lift,c(0.025,0.975))
c(lower,upper)
c(lower_relative,upper_relative)
quantile(diff,c(0.025,0.975))
quantile(lift,c(0.025,0.975))
c(lower,upper)
c(lower_relative,upper_relative)
ms
n=10000
mu_trm=p1_hat
sd_trm=p1_hat*(1-p1_hat)/ms
mu_ctrl=p2_hat
sd_ctrl=p2_hat*(1-p2_hat)/ms
trm=rnorm(n,mu_trm,sd_trm)
ctrl=rnorm(n,mu_ctrl,sd_ctrl)
diff=trm-ctrl
lift=(trm-ctrl)/ctrl
quantile(diff,c(0.025,0.975))
quantile(lift,c(0.025,0.975))
c(lower,upper)
c(lower_relative,upper_relative)
n=10000
mu_trm=p1_hat
sd_trm=sqrt(p1_hat*(1-p1_hat)/ms)
mu_ctrl=p2_hat
sd_ctrl=sqrt(p2_hat*(1-p2_hat)/ms)
trm=rnorm(n,mu_trm,sd_trm)
ctrl=rnorm(n,mu_ctrl,sd_ctrl)
diff=trm-ctrl
lift=(trm-ctrl)/ctrl
quantile(diff,c(0.025,0.975))
quantile(lift,c(0.025,0.975))
c(lower,upper)
c(lower_relative,upper_relative)
ctrl
p1
delta
p2
n
c(lower,upper)
quantile(diff,c(0.025,0.975))
c(lower_relative,upper_relative)
quantile(lift,c(0.025,0.975))
?rbinom
head(  ctrl)
p1
ctrl=rbinom(ms,1,p1)
head(  ctrl)
(qnorm(1-alpha/2)+qnorm(1-beta))^2/(delta)^2)+1
#ms is Minimum sample size
ctrl=rbinom(ms,1,p1)
trm=rbinom(ms,1,p1+delta)
#trm=rbinom(ms,1,p1+delta)
p1_hat=mean(ctrl)
p2_hat=mean(trm)
lower=p2_hat-p1_hat-1.96*sqrt(p1_hat*(1-p1_hat)/ms+p2_hat*(1-p2_hat)/ms)
upper=p2_hat-p1_hat+1.96*sqrt(p1_hat*(1-p1_hat)/ms+p2_hat*(1-p2_hat)/ms)
lower_relative=exp(log(p2_hat)-log(p1_hat)-1.96*sqrt((1-p1_hat)/p1_hat/ms+(1-p2_hat)/p2/ms))-1
upper_relative=exp(log(p2_hat)-log(p1_hat)+1.96*sqrt((1-p1_hat)/p1_hat/ms+(1-p2_hat)/p2/ms))-1
n=10000
mu_trm=p1_hat
sd_trm=sqrt(p1_hat*(1-p1_hat)/ms)
mu_ctrl=p2_hat
sd_ctrl=sqrt(p2_hat*(1-p2_hat)/ms)
trm_s=rnorm(n,mu_trm,sd_trm)
ctrl_s=rnorm(n,mu_ctrl,sd_ctrl)
diff=trm_s-ctrl_s
lift=(trm_s-ctrl_s)/ctrl_s
c(lower,upper)
quantile(diff,c(0.025,0.975))
c(lower_relative,upper_relative)
quantile(lift,c(0.025,0.975))
mu_trm
sd_trm
sd(ctrl)
sd(ctrl/ms)
sqrt(var(ctrl)/ms)
sqrt(var(trm)/ms)
sd_trm
var(trm)
(p1_hat*(1-p1_hat))
?var
sqrt(p2_hat*(1-p2_hat)/ms)
?rnorm
result=numeric(0)
x=0.85
result=c(result,x)
result
result=c(result,x)
result
simulation<-function(n,ms,p){
result=numeric(0)
for ( i in 1:n){
x=pnorm(ms,1,p)
result=c(result,mean(x))
}
return(result)
}
simulation<-function(n,m,p){
result=numeric(0)
for ( i in 1:n){
x=pnorm(m,1,p)
result=c(result,mean(x))
}
return(result)
}
ctrl_s=simulation(100,ms,mu_trm)
ctrl_s=
>
ctrl_s
simulation(1,ms,mu_trm)
mu_trm
p=mu_tr,
p=mu_trm
m=ms
n=1
result=numeric(0)
for ( i in 1:n){
x=pnorm(m,1,p)
result=c(result,mean(x))
}
return(result)
}
result=numeric(0)
for ( i in 1:n){
x=pnorm(m,1,p)
result=c(result,mean(x))
}
return(result)
result=numeric(0)
for ( i in 1:n){
x=pnorm(m,1,p)
result=c(result,mean(x))
}
result
pnorm(m,1,p)
m
simulation<-function(n,m,p){
result=numeric(0)
for ( i in 1:n){
x=rnorm(m,1,p)
result=c(result,mean(x))
}
return(result)
}
ctrl_s=simulation(1,ms,mu_trm)
ctrl_s
m=ms
p=mu_trm
x=rnorm(m,1,p)
mean(x)
simulation<-function(n,m,p){
result=numeric(0)
for ( i in 1:n){
x=rnorm(m,1,p)
result=c(result,mean(x))
}
return(result)
}
simulation<-function(n,m,p){
result=numeric(0)
for ( i in 1:n){
x=rbinom(m,1,p)
result=c(result,mean(x))
}
return(result)
}
ctrl_s=simulation(1,ms,mu_trm)
ctrl_s
ctrl_s=simulation(n,ms,mu_trm)
ctrl_s
n
n=1000
ctrl_s=simulation(n,ms,mu_trm)
n=1000
mu_trm=p1_hat
mu_ctrl=p2_hat
ctrl_s=simulation(n,ms,mu_ctrl)
trm_s=simulation(n,ms,mu_trm)
diff=trm_s-ctrl_s
lift=(trm_s-ctrl_s)/ctrl_s
c(lower,upper)
quantile(diff,c(0.025,0.975))
c(lower_relative,upper_relative)
quantile(lift,c(0.025,0.975))
x
m=ms
p=p2_hat
x=rbinom(m,1,p)
x
mean(x)
ctrl_s
trm_s
hist(trm_s)
hist(ctrl_s)
mu_trm=p1_hat
mu_ctrl=p2_hat
ctrl_s=simulation(ms,ms,mu_ctrl)
n=10000
mu_trm=p1_hat
mu_ctrl=p2_hat
ctrl_s=simulation(n,ms,mu_ctrl)
trm_s=simulation(n,ms,mu_trm)
diff=trm_s-ctrl_s
lift=(trm_s-ctrl_s)/ctrl_s
c(lower,upper)
quantile(diff,c(0.025,0.975))
c(lower_relative,upper_relative)
quantile(lift,c(0.025,0.975))
mu_trm
mu_ctrl
p2_hat-p1_hat
p2_hat-p1_hat
mu_trm=p2_hat
mu_ctrl=p1_hat
ctrl_s=simulation(n,ms,mu_ctrl)
trm_s=simulation(n,ms,mu_trm)
diff=trm_s-ctrl_s
lift=(trm_s-ctrl_s)/ctrl_s
c(lower,upper)
quantile(diff,c(0.025,0.975))
c(lower_relative,upper_relative)
quantile(lift,c(0.025,0.975))
n=10000
mu_trm=p2_hat
mu_ctrl=p1_hat
sd_trm=sqrt(p2_hat*(1-p2_hat)/ms)
sd_ctrl=sqrt(p1_hat*(1-p1_hat)/ms)
trm_s=rnorm(n,mu_trm,sd_trm)
ctrl_s=rnorm(n,mu_ctrl,sd_ctrl)
n
c(lower,upper)
quantile(diff,c(0.025,0.975))
c(lower_relative,upper_relative)
quantile(lift,c(0.025,0.975))
diff=trm_s-ctrl_s
lift=(trm_s-ctrl_s)/ctrl_s
c(lower,upper)
quantile(diff,c(0.025,0.975))
c(lower_relative,upper_relative)
quantile(lift,c(0.025,0.975))
?rnorm
help.search("rnorm")
rnorm
ctrl
mean(ctrl)
sqrt(p1_hat*(1-p1_hat)
)
?p-value
?p
MD
available.packages()
install.packages("slidify")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("KernSmooth")
library(KernSmooth)
install.packages("~/Documents/datasciencecoursera/data/XML_3.98-1.7.tgz", repos = NULL, type = .Platform$pkgType)
library(XML)
updateR()
install.packages("installr")
install.packages("installr")
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
updateR()
install.packages('XML_3.98-1.7.tgz', lib="/Users/didi/Documents/datasciencecoursera/data",repos = NULL)
install.packages("XML")
library(XML)
install.packages("XML")
library(XML)
install("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("XML")
library(XML)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
doc <- xmlTreeParse(fileUrl, method="curl", useInternal=TRUE)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
library(RCurl)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
download.file(fileUrl, destfile="./data/menu.txt", method="curl")
setwd("~/Documents/datasciencecoursera")
chooseCRANmirror()
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE, method="curl")
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
chooseCRANmirror()
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
checkForServer()
Sys.setenv(http_proxy = "http://localhost:8123")
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
?Sys.setenv
checkForServer()
fileUrl <- "http://www.w3school.com.cn/example/xmle/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
fileUrl <- "http://www.w3school.com.cn/example/xmle/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
rootNode
xmlname(rootNode)
xmlname(rootNode)
names(rootNode)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNote,xmlValue)
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode, "//name", xmlValue)
fileUrl <- "http://www.w3school.com.cn/example/xmle/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode, "//name", xmlValue)
xpathSApply(rootNode, "//price", xmlValue)
fileUrl <- "http://espn.go.com/nfl/team/_/name/bal/baltimore-ravens"
doc <- htmlTreeParse(fileUrl, useInternal=TRUE)
scores <- xpathSApply(doc, "//li[@class='score']", xmlValue)
teams <- xpathSApply(doc, "//li[@class='team-name']", xmlValue)
scores
teams
scores
scores <- xpathSApply(doc, "//li[@class='scores']", xmlValue)
scores
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
names(jsonData$owner)
View(jsonData)
jasonData$owner$login
jsonData$owner$login
myjson <- toJSON(iris, pretty=TRUE)
cat(myjson)
head(iris)
cat(myjson)
iris2 <- fromJSON(myjson)
head(iris)
library(data.table)
DF=data.frame(x=rnorm(9), y=rep(c("a", "b", "c"), each=3), z=rnorm(9))
head(DF,3)
DT = data.table(x=rnorm(9), y=rep(c("a", "b", "c"), each=3)
DT = data.table(x=rnorm(9), y=rep(c("a", "b", "c"), each=3), z=rnorm(9))
DT = data.table(x=rnorm(9), y=rep(c("a", "b", "c"), each=3), z=rnorm(9))
intall.packages("data.table")
library(data.table)
intall.packages("data.table")
intall.packages("data.table")
intall.packages("data.frame")
install.packages("data.table")
install.packages("data.table")
chooseCRANmirror()
install.packages("data.table")
library(data.table)
DT = data.table(x=rnorm(9), y=rep(c("a", "b", "c"), each=3), z=rnorm(9))
head(DF,3)
tables()
DT[2,]
DT
DT[2,]
DT[DT$y=="a",]
DT[c(2,3)]
DT[, c(2,3)]
DT[, list(mean(x), sum(z))]
DT[, table(y)]
DT[, w:=z^2]   #add new variable
DT
DT2 <- DT
DT[, y:=2]
head(DT, n=3)
head(DT2, n=3)
DT[, m:= {tmp <- (x+z); log2(tmp+5)}]
DT[, a:= x>0]
DT
DT[, b:=mean(x+w), by=a]  #group by a
DT
set.seed(123);
DT <- data.table(x=sample(letters[1:3], 1E5, TRUE))  #create a, b, c each for very large amount of times
DT[, .N, by=x]
DT
DT[, .N, by=x]  #.N means count the number of times
DT <- data.table(x=rep(c("a", "b", "c"), each=100), y=rnorm(300))
DT
head(DT)
setkey(DT, x)
DT["a"]
DT[,x="a"]
DT[,"a"]
DT[,"x"]
DT[key="a"]
DT["a"]
DT1 <- data.table(x=c('a', 'a', 'b', 'dt1'), y=1:4)
DT1
DT2 <- data.table(x=c('a', 'b', 'dt2'), z=5:7)
DT2
setkey(DT1, x); setkey(DT2, x)
merge(DT1, DT2)
big_df <- data.frame(x=rnorm(1E6), y=rnorm(1E6))
head(big_df)
file <- tempfile()
write.table(big_df, file=file, row.names=FALSE, col.names = TRUE, sep="\t", quote=FALSE)
system.time(fread(file))
fread(file)
file
head(file)
system.time(read.table(file, header=TRUE, sep='\t'))
system.time(fread(file))
install_from_swirl("Getting and Cleaning Data")
library(swirl)
setwd("~/Documents/datasciencecoursera/datasciencecoursera")
swirl()
info()
main()
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl()
set_config(use_proxy(url="10.3.100.207",port=8080))
install.packages("set_config")
?InstallCourses
install_course("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
Sys.getenv("http_proxy")
Sys.setenv(http_proxy="http://user:password@proxy_server:port")
Sys.getenv("http_proxy")
install_from_swirl("Getting and Cleaning Data")
Sys.getenv("http_proxy")
Sys.setenv(http_proxy="http://staff-proxy.ul.ie:8080")
Sys.getenv("http_proxy")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
Sys.getenv("http_proxy")
Sys.setenv(http_proxy="http://user:password@proxy_server:port")
install.packages("ggplot")
getOption("repos")
install_from_swirl("Getting and Cleaning Data")
